/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { StatusUpdate } from "./StatusUpdate";
import { StatusUpdateCountArgs } from "./StatusUpdateCountArgs";
import { StatusUpdateFindManyArgs } from "./StatusUpdateFindManyArgs";
import { StatusUpdateFindUniqueArgs } from "./StatusUpdateFindUniqueArgs";
import { CreateStatusUpdateArgs } from "./CreateStatusUpdateArgs";
import { UpdateStatusUpdateArgs } from "./UpdateStatusUpdateArgs";
import { DeleteStatusUpdateArgs } from "./DeleteStatusUpdateArgs";
import { Bowl } from "../../bowl/base/Bowl";
import { User } from "../../user/base/User";
import { StatusUpdateService } from "../statusUpdate.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => StatusUpdate)
export class StatusUpdateResolverBase {
  constructor(
    protected readonly service: StatusUpdateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "StatusUpdate",
    action: "read",
    possession: "any",
  })
  async _statusUpdatesMeta(
    @graphql.Args() args: StatusUpdateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [StatusUpdate])
  @nestAccessControl.UseRoles({
    resource: "StatusUpdate",
    action: "read",
    possession: "any",
  })
  async statusUpdates(
    @graphql.Args() args: StatusUpdateFindManyArgs
  ): Promise<StatusUpdate[]> {
    return this.service.statusUpdates(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => StatusUpdate, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "StatusUpdate",
    action: "read",
    possession: "own",
  })
  async statusUpdate(
    @graphql.Args() args: StatusUpdateFindUniqueArgs
  ): Promise<StatusUpdate | null> {
    const result = await this.service.statusUpdate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => StatusUpdate)
  @nestAccessControl.UseRoles({
    resource: "StatusUpdate",
    action: "create",
    possession: "any",
  })
  async createStatusUpdate(
    @graphql.Args() args: CreateStatusUpdateArgs
  ): Promise<StatusUpdate> {
    return await this.service.createStatusUpdate({
      ...args,
      data: {
        ...args.data,

        bowl: args.data.bowl
          ? {
              connect: args.data.bowl,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => StatusUpdate)
  @nestAccessControl.UseRoles({
    resource: "StatusUpdate",
    action: "update",
    possession: "any",
  })
  async updateStatusUpdate(
    @graphql.Args() args: UpdateStatusUpdateArgs
  ): Promise<StatusUpdate | null> {
    try {
      return await this.service.updateStatusUpdate({
        ...args,
        data: {
          ...args.data,

          bowl: args.data.bowl
            ? {
                connect: args.data.bowl,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StatusUpdate)
  @nestAccessControl.UseRoles({
    resource: "StatusUpdate",
    action: "delete",
    possession: "any",
  })
  async deleteStatusUpdate(
    @graphql.Args() args: DeleteStatusUpdateArgs
  ): Promise<StatusUpdate | null> {
    try {
      return await this.service.deleteStatusUpdate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Bowl, {
    nullable: true,
    name: "bowl",
  })
  @nestAccessControl.UseRoles({
    resource: "Bowl",
    action: "read",
    possession: "any",
  })
  async getBowl(@graphql.Parent() parent: StatusUpdate): Promise<Bowl | null> {
    const result = await this.service.getBowl(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: StatusUpdate): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
