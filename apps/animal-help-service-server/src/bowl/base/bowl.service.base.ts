/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Bowl as PrismaBowl,
  StatusUpdate as PrismaStatusUpdate,
  Location as PrismaLocation,
} from "@prisma/client";

export class BowlServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BowlCountArgs, "select">): Promise<number> {
    return this.prisma.bowl.count(args);
  }

  async bowls(args: Prisma.BowlFindManyArgs): Promise<PrismaBowl[]> {
    return this.prisma.bowl.findMany(args);
  }
  async bowl(args: Prisma.BowlFindUniqueArgs): Promise<PrismaBowl | null> {
    return this.prisma.bowl.findUnique(args);
  }
  async createBowl(args: Prisma.BowlCreateArgs): Promise<PrismaBowl> {
    return this.prisma.bowl.create(args);
  }
  async updateBowl(args: Prisma.BowlUpdateArgs): Promise<PrismaBowl> {
    return this.prisma.bowl.update(args);
  }
  async deleteBowl(args: Prisma.BowlDeleteArgs): Promise<PrismaBowl> {
    return this.prisma.bowl.delete(args);
  }

  async findStatusUpdates(
    parentId: string,
    args: Prisma.StatusUpdateFindManyArgs
  ): Promise<PrismaStatusUpdate[]> {
    return this.prisma.bowl
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .statusUpdates(args);
  }

  async getLocation(parentId: string): Promise<PrismaLocation | null> {
    return this.prisma.bowl
      .findUnique({
        where: { id: parentId },
      })
      .location();
  }
}
