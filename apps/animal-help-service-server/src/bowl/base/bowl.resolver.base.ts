/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Bowl } from "./Bowl";
import { BowlCountArgs } from "./BowlCountArgs";
import { BowlFindManyArgs } from "./BowlFindManyArgs";
import { BowlFindUniqueArgs } from "./BowlFindUniqueArgs";
import { CreateBowlArgs } from "./CreateBowlArgs";
import { UpdateBowlArgs } from "./UpdateBowlArgs";
import { DeleteBowlArgs } from "./DeleteBowlArgs";
import { StatusUpdateFindManyArgs } from "../../statusUpdate/base/StatusUpdateFindManyArgs";
import { StatusUpdate } from "../../statusUpdate/base/StatusUpdate";
import { Location } from "../../location/base/Location";
import { BowlService } from "../bowl.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Bowl)
export class BowlResolverBase {
  constructor(
    protected readonly service: BowlService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Bowl",
    action: "read",
    possession: "any",
  })
  async _bowlsMeta(
    @graphql.Args() args: BowlCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Bowl])
  @nestAccessControl.UseRoles({
    resource: "Bowl",
    action: "read",
    possession: "any",
  })
  async bowls(@graphql.Args() args: BowlFindManyArgs): Promise<Bowl[]> {
    return this.service.bowls(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Bowl, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Bowl",
    action: "read",
    possession: "own",
  })
  async bowl(@graphql.Args() args: BowlFindUniqueArgs): Promise<Bowl | null> {
    const result = await this.service.bowl(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Bowl)
  @nestAccessControl.UseRoles({
    resource: "Bowl",
    action: "create",
    possession: "any",
  })
  async createBowl(@graphql.Args() args: CreateBowlArgs): Promise<Bowl> {
    return await this.service.createBowl({
      ...args,
      data: {
        ...args.data,

        location: args.data.location
          ? {
              connect: args.data.location,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Bowl)
  @nestAccessControl.UseRoles({
    resource: "Bowl",
    action: "update",
    possession: "any",
  })
  async updateBowl(@graphql.Args() args: UpdateBowlArgs): Promise<Bowl | null> {
    try {
      return await this.service.updateBowl({
        ...args,
        data: {
          ...args.data,

          location: args.data.location
            ? {
                connect: args.data.location,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Bowl)
  @nestAccessControl.UseRoles({
    resource: "Bowl",
    action: "delete",
    possession: "any",
  })
  async deleteBowl(@graphql.Args() args: DeleteBowlArgs): Promise<Bowl | null> {
    try {
      return await this.service.deleteBowl(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [StatusUpdate], { name: "statusUpdates" })
  @nestAccessControl.UseRoles({
    resource: "StatusUpdate",
    action: "read",
    possession: "any",
  })
  async findStatusUpdates(
    @graphql.Parent() parent: Bowl,
    @graphql.Args() args: StatusUpdateFindManyArgs
  ): Promise<StatusUpdate[]> {
    const results = await this.service.findStatusUpdates(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Location, {
    nullable: true,
    name: "location",
  })
  @nestAccessControl.UseRoles({
    resource: "Location",
    action: "read",
    possession: "any",
  })
  async getLocation(@graphql.Parent() parent: Bowl): Promise<Location | null> {
    const result = await this.service.getLocation(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
