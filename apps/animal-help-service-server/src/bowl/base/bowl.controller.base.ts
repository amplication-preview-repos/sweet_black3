/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { BowlService } from "../bowl.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { BowlCreateInput } from "./BowlCreateInput";
import { Bowl } from "./Bowl";
import { BowlFindManyArgs } from "./BowlFindManyArgs";
import { BowlWhereUniqueInput } from "./BowlWhereUniqueInput";
import { BowlUpdateInput } from "./BowlUpdateInput";
import { StatusUpdateFindManyArgs } from "../../statusUpdate/base/StatusUpdateFindManyArgs";
import { StatusUpdate } from "../../statusUpdate/base/StatusUpdate";
import { StatusUpdateWhereUniqueInput } from "../../statusUpdate/base/StatusUpdateWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class BowlControllerBase {
  constructor(
    protected readonly service: BowlService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Bowl })
  @nestAccessControl.UseRoles({
    resource: "Bowl",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createBowl(@common.Body() data: BowlCreateInput): Promise<Bowl> {
    return await this.service.createBowl({
      data: {
        ...data,

        location: data.location
          ? {
              connect: data.location,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        capacity: true,
        status: true,

        location: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Bowl] })
  @ApiNestedQuery(BowlFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Bowl",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async bowls(@common.Req() request: Request): Promise<Bowl[]> {
    const args = plainToClass(BowlFindManyArgs, request.query);
    return this.service.bowls({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        capacity: true,
        status: true,

        location: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Bowl })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Bowl",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async bowl(
    @common.Param() params: BowlWhereUniqueInput
  ): Promise<Bowl | null> {
    const result = await this.service.bowl({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        capacity: true,
        status: true,

        location: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Bowl })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Bowl",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateBowl(
    @common.Param() params: BowlWhereUniqueInput,
    @common.Body() data: BowlUpdateInput
  ): Promise<Bowl | null> {
    try {
      return await this.service.updateBowl({
        where: params,
        data: {
          ...data,

          location: data.location
            ? {
                connect: data.location,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          capacity: true,
          status: true,

          location: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Bowl })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Bowl",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteBowl(
    @common.Param() params: BowlWhereUniqueInput
  ): Promise<Bowl | null> {
    try {
      return await this.service.deleteBowl({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          capacity: true,
          status: true,

          location: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/statusUpdates")
  @ApiNestedQuery(StatusUpdateFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "StatusUpdate",
    action: "read",
    possession: "any",
  })
  async findStatusUpdates(
    @common.Req() request: Request,
    @common.Param() params: BowlWhereUniqueInput
  ): Promise<StatusUpdate[]> {
    const query = plainToClass(StatusUpdateFindManyArgs, request.query);
    const results = await this.service.findStatusUpdates(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,
        timestamp: true,

        bowl: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/statusUpdates")
  @nestAccessControl.UseRoles({
    resource: "Bowl",
    action: "update",
    possession: "any",
  })
  async connectStatusUpdates(
    @common.Param() params: BowlWhereUniqueInput,
    @common.Body() body: StatusUpdateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      statusUpdates: {
        connect: body,
      },
    };
    await this.service.updateBowl({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/statusUpdates")
  @nestAccessControl.UseRoles({
    resource: "Bowl",
    action: "update",
    possession: "any",
  })
  async updateStatusUpdates(
    @common.Param() params: BowlWhereUniqueInput,
    @common.Body() body: StatusUpdateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      statusUpdates: {
        set: body,
      },
    };
    await this.service.updateBowl({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/statusUpdates")
  @nestAccessControl.UseRoles({
    resource: "Bowl",
    action: "update",
    possession: "any",
  })
  async disconnectStatusUpdates(
    @common.Param() params: BowlWhereUniqueInput,
    @common.Body() body: StatusUpdateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      statusUpdates: {
        disconnect: body,
      },
    };
    await this.service.updateBowl({
      where: params,
      data,
      select: { id: true },
    });
  }
}
